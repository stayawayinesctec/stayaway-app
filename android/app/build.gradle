/**
 * Copyright (c) 2020 INESC TEC <https://www.inesctec.pt>
 *
 * This Source Code Form is subject to the terms of the European Union
 * Public License, v. 1.2. If a copy of the EUPL was not distributed with
 * this file, You can obtain one at https://opensource.org/licenses/EUPL-1.2.
 *
 * SPDX-License-Identifier: EUPL-1.2
 *
 */

apply plugin: "com.android.application"

import com.android.build.OutputFile

ext.readProperty = { paramName ->
	if (project.hasProperty(paramName)) {
		return project.getProperties().get(paramName)
	} else {
		Properties properties = new Properties()
		if (project.rootProject.file('local.properties').exists()) {
			properties.load(project.rootProject.file('local.properties').newDataInputStream())
		}
		if (properties.getProperty(paramName) != null) {
			return properties.getProperty(paramName)
		} else {
			return null
		}
	}
}

project.ext.react = [
    // whether to bundle JS and assets in debug mode
    bundleInDebug: false,

    // whether to bundle JS and assets in staging mode
    bundleInStaging: true,

    // whether to bundle JS and assets in release mode
    bundleInRelease: true,

    // whether to bundle JS and assets in UI debug mode
    bundleInUiDebug: false,

    // whether to bundle JS and assets in UI staging mode
    bundleInUiStaging: true,

    // whether to bundle JS and assets in UI release mode
    bundleInUiRelease: true,

    // whether to bundle JS and assets in production debug mode
    bundleInProductionDebug: false,

    // whether to bundle JS and assets in production staging mode
    bundleInProductionStaging: true,

    // whether to bundle JS and assets in production release mode
    bundleInProductionRelease: true,

    // whether to disable dev mode in debug mode
    devDisabledInDebug: false,

    // whether to disable dev mode in staging mode
    devDisabledInStaging: true,

    // whether to disable dev mode in release mode
    devDisabledInRelease: true,

    // whether to disable dev mode in UI debug mode
    devDisabledInUiDebug: false,

    // whether to disable dev mode in UI staging mode
    devDisabledInUiStaging: true,

    // whether to disable dev mode in UI release mode
    devDisabledInUiRelease: true,

    // whether to disable dev mode in production debug mode
    devDisabledInProductionDebug: false,

    // whether to disable dev mode in production staging mode
    devDisabledInProductionStaging: true,

    // whether to disable dev mode in production release mode
    devDisabledInProductionRelease: true,

    // the root of your project, i.e. where "package.json" lives
    root: "../../",

    // by default the gradle tasks are skipped if none of the JS files or assets change; this means
    // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
    // date; if you have any other folders that you want to ignore for performance reasons (gradle
    // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
    // for example, you might want to remove it from here.
    inputExcludes: ["android/**", "ios/**", "__tests__/**", "js_build/**", "bundle_out/**"],

    // override which node gets called and with what additional arguments
    nodeExecutableAndArgs: hasProperty('NODE_BINARY') ? [NODE_BINARY] : ["node"],

    // whether to enable the Hermes VM.
    enableHermes: true,  // clean and rebuild if changing
]

project.ext.envConfigFiles = [
    productionDebug: ".env.production.debug",
    uiDebug: ".env.ui.debug",
    productionStaging: ".env.production.staging",
    uiStaging: ".env.ui.staging",
    productionRelease: ".env.production.release",
    uiRelease: ".env.ui.release",
]

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion rootProject.ext.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "fct.inesctec.stayaway"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 10010
        versionName "1.0.1"

        resValue "string", "build_config_package", "fct.inesctec.stayaway"
        resConfigs "en", "pt"

        buildConfigField "long", "BUILD_TIME", System.currentTimeMillis() + "L"
        testBuildType System.getProperty('testBuildType', 'debug')
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (readProperty('keystoreFile')) {
                storeFile file(readProperty('keystoreFile'))
                storePassword readProperty('keystorePassword')
                keyAlias readProperty('keyAlias')
                keyPassword readProperty('keyPassword')
            } else {
                storeFile file('debug.keystore')
                storePassword 'android'
                keyAlias 'androiddebugkey'
                keyPassword 'android'
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
        }
        staging {
            signingConfig signingConfigs.release
            applicationIdSuffix ".debug"
            versionNameSuffix "-staging"
            shrinkResources enableProguardInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
            matchingFallbacks = ['release', 'debug']
        }
        release {
            signingConfig signingConfigs.release
            shrinkResources enableProguardInReleaseBuilds
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }
    flavorDimensions "version"
    productFlavors {
        ui {
            dimension "version"
            applicationIdSuffix ".ui"
            versionNameSuffix "-ui"
        }
        production {
            dimension "version"
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }

        }
    }

    dexOptions {
        preDexLibraries false
        javaMaxHeapSize "8g"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    def dp3t_sdk_version = '1.0.4'
	debugImplementation "org.dpppt:dp3t-sdk-android:$dp3t_sdk_version-calibration"
	stagingImplementation "org.dpppt:dp3t-sdk-android:$dp3t_sdk_version"
	releaseImplementation "org.dpppt:dp3t-sdk-android:$dp3t_sdk_version"

    implementation 'androidx.core:core:1.2.0'
    implementation 'androidx.security:security-crypto:1.0.0-rc01'
    implementation 'androidx.work:work-runtime:2.3.4'

    implementation 'com.squareup.retrofit2:retrofit:2.6.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation('com.squareup.retrofit2:converter-protobuf:2.6.2') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }
    implementation 'com.google.protobuf:protobuf-javalite:3.11.1'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.benchmark:benchmark-junit4:1.0.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation('com.wix:detox:+')

    implementation 'com.g00fy2:versioncompare:1.3.4'

    implementation fileTree(dir: "libs", include: ["*.jar"])
    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        stagingImplementation files(hermesPath + "hermes-release.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
